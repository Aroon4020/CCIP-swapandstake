/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CCIPReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCIPReceiver__factory>;
    getContractFactory(
      name: "IAny2EVMMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAny2EVMMessageReceiver__factory>;
    getContractFactory(
      name: "IRouterClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterClient__factory>;
    getContractFactory(
      name: "Client",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Client__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DestChainReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DestChainReceiver__factory>;
    getContractFactory(
      name: "IAlgebraSwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlgebraSwapCallback__factory>;
    getContractFactory(
      name: "IStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStake__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IWMATIC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWMATIC__factory>;
    getContractFactory(
      name: "SourceChainSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SourceChainSender__factory>;
    getContractFactory(
      name: "Stake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Stake__factory>;

    getContractAt(
      name: "CCIPReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCIPReceiver>;
    getContractAt(
      name: "IAny2EVMMessageReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAny2EVMMessageReceiver>;
    getContractAt(
      name: "IRouterClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterClient>;
    getContractAt(
      name: "Client",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Client>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DestChainReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DestChainReceiver>;
    getContractAt(
      name: "IAlgebraSwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlgebraSwapCallback>;
    getContractAt(
      name: "IStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStake>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IWMATIC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWMATIC>;
    getContractAt(
      name: "SourceChainSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SourceChainSender>;
    getContractAt(
      name: "Stake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Stake>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
