/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DestChainReceiver,
  DestChainReceiverInterface,
} from "../../../../artifacts/contracts/Dest_Chain.sol/DestChainReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stake",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "InvalidRouter",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000dde38038062000dde833981810160405281019062000037919062000194565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401620000a49190620001ec565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000209565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015c826200012f565b9050919050565b6200016e816200014f565b81146200017a57600080fd5b50565b6000815190506200018e8162000163565b92915050565b60008060408385031215620001ae57620001ad6200012a565b5b6000620001be858286016200017d565b9250506020620001d1858286016200017d565b9150509250929050565b620001e6816200014f565b82525050565b6000602082019050620002036000830184620001db565b92915050565b608051610bb26200022c60003960008181610184015261022b0152610bb26000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a71461004657806385572ffb14610076578063b0f479a114610092575b600080fd5b610060600480360381019061005b919061046a565b6100b0565b60405161006d91906104b2565b60405180910390f35b610090600480360381019061008b91906104f1565b610182565b005b61009a610227565b6040516100a7919061057b565b60405180910390f35b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061017b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021257336040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401610209919061057b565b60405180910390fd5b6102248161021f906109b6565b61024f565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b8060800151600081518110610267576102666109c9565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683608001516000815181106102c7576102c66109c9565b5b6020026020010151602001516040518363ffffffff1660e01b81526004016102f0929190610a07565b6020604051808303816000875af115801561030f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103339190610a5c565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637acb77578260800151600081518110610388576103876109c9565b5b60200260200101516020015183606001518060200190518101906103ac9190610ac7565b6040518363ffffffff1660e01b81526004016103c9929190610b53565b600060405180830381600087803b1580156103e357600080fd5b505af11580156103f7573d6000803e3d6000fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61044781610412565b811461045257600080fd5b50565b6000813590506104648161043e565b92915050565b6000602082840312156104805761047f610408565b5b600061048e84828501610455565b91505092915050565b60008115159050919050565b6104ac81610497565b82525050565b60006020820190506104c760008301846104a3565b92915050565b600080fd5b600060a082840312156104e8576104e76104cd565b5b81905092915050565b60006020828403121561050757610506610408565b5b600082013567ffffffffffffffff8111156105255761052461040d565b5b610531848285016104d2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105658261053a565b9050919050565b6105758161055a565b82525050565b6000602082019050610590600083018461056c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105e48261059b565b810181811067ffffffffffffffff82111715610603576106026105ac565b5b80604052505050565b60006106166103fe565b905061062282826105db565b919050565b600080fd5b6000819050919050565b61063f8161062c565b811461064a57600080fd5b50565b60008135905061065c81610636565b92915050565b600067ffffffffffffffff82169050919050565b61067f81610662565b811461068a57600080fd5b50565b60008135905061069c81610676565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156106c7576106c66105ac565b5b6106d08261059b565b9050602081019050919050565b82818337600083830152505050565b60006106ff6106fa846106ac565b61060c565b90508281526020810184848401111561071b5761071a6106a7565b5b6107268482856106dd565b509392505050565b600082601f830112610743576107426106a2565b5b81356107538482602086016106ec565b91505092915050565b600067ffffffffffffffff821115610777576107766105ac565b5b602082029050602081019050919050565b600080fd5b6107968161055a565b81146107a157600080fd5b50565b6000813590506107b38161078d565b92915050565b6000819050919050565b6107cc816107b9565b81146107d757600080fd5b50565b6000813590506107e9816107c3565b92915050565b60006040828403121561080557610804610596565b5b61080f604061060c565b9050600061081f848285016107a4565b6000830152506020610833848285016107da565b60208301525092915050565b600061085261084d8461075c565b61060c565b9050808382526020820190506040840283018581111561087557610874610788565b5b835b8181101561089e578061088a88826107ef565b845260208401935050604081019050610877565b5050509392505050565b600082601f8301126108bd576108bc6106a2565b5b81356108cd84826020860161083f565b91505092915050565b600060a082840312156108ec576108eb610596565b5b6108f660a061060c565b905060006109068482850161064d565b600083015250602061091a8482850161068d565b602083015250604082013567ffffffffffffffff81111561093e5761093d610627565b5b61094a8482850161072e565b604083015250606082013567ffffffffffffffff81111561096e5761096d610627565b5b61097a8482850161072e565b606083015250608082013567ffffffffffffffff81111561099e5761099d610627565b5b6109aa848285016108a8565b60808301525092915050565b60006109c236836108d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610a01816107b9565b82525050565b6000604082019050610a1c600083018561056c565b610a2960208301846109f8565b9392505050565b610a3981610497565b8114610a4457600080fd5b50565b600081519050610a5681610a30565b92915050565b600060208284031215610a7257610a71610408565b5b6000610a8084828501610a47565b91505092915050565b6000610a948261053a565b9050919050565b610aa481610a89565b8114610aaf57600080fd5b50565b600081519050610ac181610a9b565b92915050565b600060208284031215610add57610adc610408565b5b6000610aeb84828501610ab2565b91505092915050565b6000819050919050565b6000610b19610b14610b0f8461053a565b610af4565b61053a565b9050919050565b6000610b2b82610afe565b9050919050565b6000610b3d82610b20565b9050919050565b610b4d81610b32565b82525050565b6000604082019050610b6860008301856109f8565b610b756020830184610b44565b939250505056fea264697066735822122072491a0b022765419ffb7da51b72fbedad823ce51fb19345bd7a41ac438936cd64736f6c63430008130033";

type DestChainReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DestChainReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DestChainReceiver__factory extends ContractFactory {
  constructor(...args: DestChainReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: PromiseOrValue<string>,
    _stake: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DestChainReceiver> {
    return super.deploy(
      router,
      _stake,
      overrides || {}
    ) as Promise<DestChainReceiver>;
  }
  override getDeployTransaction(
    router: PromiseOrValue<string>,
    _stake: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, _stake, overrides || {});
  }
  override attach(address: string): DestChainReceiver {
    return super.attach(address) as DestChainReceiver;
  }
  override connect(signer: Signer): DestChainReceiver__factory {
    return super.connect(signer) as DestChainReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DestChainReceiverInterface {
    return new utils.Interface(_abi) as DestChainReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DestChainReceiver {
    return new Contract(address, _abi, signerOrProvider) as DestChainReceiver;
  }
}
