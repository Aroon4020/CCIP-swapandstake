/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Stake, StakeInterface } from "../../../artifacts/contracts/Stake";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "onBehalfOf",
        type: "address",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610db1380380610db1833981810160405281019061003291906100e4565b600160008190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610111565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b182610086565b9050919050565b6100c1816100a6565b81146100cc57600080fd5b50565b6000815190506100de816100b8565b92915050565b6000602082840312156100fa576100f9610081565b5b6000610108848285016100cf565b91505092915050565b610c91806101206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806316934fc4146100465780632e17de78146100765780637acb775714610092575b600080fd5b610060600480360381019061005b91906106ea565b6100ae565b60405161006d9190610730565b60405180910390f35b610090600480360381019061008b9190610777565b6100c6565b005b6100ac60048036038101906100a791906107a4565b61020d565b005b60016020528060005260406000206000915090505481565b60026000540361010b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010290610841565b60405180910390fd5b6002600081905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561015f57600080fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101ae9190610890565b925050819055506102023382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661030b9092919063ffffffff16565b600160008190555050565b600260005403610252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024990610841565b60405180910390fd5b60026000819055506102a9333084600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610391909392919063ffffffff16565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f891906108c4565b9250508190555060016000819055505050565b61038c8363a9059cbb60e01b848460405160240161032a929190610907565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061041a565b505050565b610414846323b872dd60e01b8585856040516024016103b293929190610930565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061041a565b50505050565b600061047c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166104e19092919063ffffffff16565b90506000815111156104dc578080602001905181019061049c919061099f565b6104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290610a3e565b60405180910390fd5b5b505050565b60606104f084846000856104f9565b90509392505050565b60608247101561053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590610ad0565b60405180910390fd5b6105478561060d565b610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d90610b3c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516105af9190610bcd565b60006040518083038185875af1925050503d80600081146105ec576040519150601f19603f3d011682016040523d82523d6000602084013e6105f1565b606091505b5091509150610601828286610620565b92505050949350505050565b600080823b905060008111915050919050565b6060831561063057829050610680565b6000835111156106435782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106779190610c39565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106b78261068c565b9050919050565b6106c7816106ac565b81146106d257600080fd5b50565b6000813590506106e4816106be565b92915050565b600060208284031215610700576106ff610687565b5b600061070e848285016106d5565b91505092915050565b6000819050919050565b61072a81610717565b82525050565b60006020820190506107456000830184610721565b92915050565b61075481610717565b811461075f57600080fd5b50565b6000813590506107718161074b565b92915050565b60006020828403121561078d5761078c610687565b5b600061079b84828501610762565b91505092915050565b600080604083850312156107bb576107ba610687565b5b60006107c985828601610762565b92505060206107da858286016106d5565b9150509250929050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061082b601f836107e4565b9150610836826107f5565b602082019050919050565b6000602082019050818103600083015261085a8161081e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061089b82610717565b91506108a683610717565b92508282039050818111156108be576108bd610861565b5b92915050565b60006108cf82610717565b91506108da83610717565b92508282019050808211156108f2576108f1610861565b5b92915050565b610901816106ac565b82525050565b600060408201905061091c60008301856108f8565b6109296020830184610721565b9392505050565b600060608201905061094560008301866108f8565b61095260208301856108f8565b61095f6040830184610721565b949350505050565b60008115159050919050565b61097c81610967565b811461098757600080fd5b50565b60008151905061099981610973565b92915050565b6000602082840312156109b5576109b4610687565b5b60006109c38482850161098a565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610a28602a836107e4565b9150610a33826109cc565b604082019050919050565b60006020820190508181036000830152610a5781610a1b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610aba6026836107e4565b9150610ac582610a5e565b604082019050919050565b60006020820190508181036000830152610ae981610aad565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610b26601d836107e4565b9150610b3182610af0565b602082019050919050565b60006020820190508181036000830152610b5581610b19565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610b90578082015181840152602081019050610b75565b60008484015250505050565b6000610ba782610b5c565b610bb18185610b67565b9350610bc1818560208601610b72565b80840191505092915050565b6000610bd98284610b9c565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000610c0b82610be4565b610c1581856107e4565b9350610c25818560208601610b72565b610c2e81610bef565b840191505092915050565b60006020820190508181036000830152610c538184610c00565b90509291505056fea26469706673582212209a72d975bd62e5f9ad4c04518fae333bfb865ccfb9b62a5ff05c31dc4c96d97964736f6c63430008130033";

type StakeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Stake__factory extends ContractFactory {
  constructor(...args: StakeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    stakingTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Stake> {
    return super.deploy(stakingTokenAddress, overrides || {}) as Promise<Stake>;
  }
  override getDeployTransaction(
    stakingTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(stakingTokenAddress, overrides || {});
  }
  override attach(address: string): Stake {
    return super.attach(address) as Stake;
  }
  override connect(signer: Signer): Stake__factory {
    return super.connect(signer) as Stake__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeInterface {
    return new utils.Interface(_abi) as StakeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Stake {
    return new Contract(address, _abi, signerOrProvider) as Stake;
  }
}
